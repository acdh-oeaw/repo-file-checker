#!/usr/bin/php
<?php

/*
 * The MIT License
 *
 * Copyright 2019 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

$composerDir = realpath(__DIR__);
while ($composerDir !== false && !file_exists("$composerDir/vendor")) {
    $composerDir = realpath("$composerDir/..");
}
require_once "$composerDir/vendor/autoload.php";

use acdhOeaw\arche\fileChecker\FileChecker;
use zozlak\argparse\ArgumentParser;
use acdhOeaw\arche\lib\ingest\Redmine;

$parser = new ArgumentParser();
$parser->addArgument('--tmpDir', default: sys_get_temp_dir(), help: "Temporary directory. If not specified, the system-wide temp dir is used.");
$parser->addArgument('--csv', action: ArgumentParser::ACTION_STORE_TRUE, help: "If present, CSV reports are generated on top of the standard JSON linse output.");
$parser->addArgument('--html', action: ArgumentParser::ACTION_STORE_TRUE, help: "If present, HTML reports are generated on top of the standard JSON lines output.");
$parser->addArgument('--overwrite', action: ArgumentParser::ACTION_STORE_TRUE, help: "If present, the report is generated directly in the reportDir without creation of a timestamp-based directory.");
$parser->addArgument('--continue', action: ArgumentParser::ACTION_STORE_TRUE, help: "If present, the checks will continue from the point they were interrupted. Note that this implicitly turns on --overwrite and requires you to specify the final reportDir just like if you were using the --overwrite option.");
$parser->addArgument('--redmineIssueId', help: "If provided (along with --redmineUser and --redminePswd), the corresponding redmine id will be updated with the check results. Both repo-filechecker issue id or its parent issue id can be provided.");
$parser->addArgument('--redmineUser');
$parser->addArgument('--redminePswd');
$parser->addArgument('--redmineToken');
$parser->addArgument('--redmineApiUrl', default: "https://redmine.acdh.oeaw.ac.at");
$parser->addArgument('--redmineDone', type: ArgumentParser::TYPE_INT, default: 10, help: "Percent done value set on the redmine issue in case of unsuccessful check.");
$parser->addArgument('--redmineMessage', default: '', help: "Message posted as a note in the redmine issue. If not provided, a default value is used.");
$parser->addArgument('--redmineAppend', action: ArgumentParser::ACTION_STORE_TRUE, help: "Should --redmineMessage be appended to the default message?");
$parser->addArgument('--skipWarnings', action: ArgumentParser::ACTION_STORE_TRUE, help: "If present, only errors cause a non-zero script return value.");
$parser->addArgument('directoryToCheck');
$parser->addArgument('reportDir');
$args   = $parser->parseArgs();
if ($args->continue) {
    $args->overwrite = true;
}

$ret = false;
try {
    $ch  = new FileChecker((array) $args);
    $ret = $ch->check($args->directoryToCheck, $args->continue);
    $ch->generateReports($args->csv, $args->html);

    if (!empty($args->redmineId)) {
        $redmine   = new Redmine($args->redmineApiUrl ?? '', $args->redmineToken ?? $args->redmineUser ?? '', ($args->redminePswd ?? ''));
        $redmineId = $redmine->updateIssue(
            $args->mainIssueId, 'Run repo-file-checker', $ret,
            issueStatus: $ret ? 'Resolved' : 'In Progress',
            done: $ret ? $args->redmineDone : 100,
            message: $args->redmineMessage,
            append: $args->redmineAppend
        );
        echo "Redmine issue $redmineId updated successfully\n";
    }
} catch (Throwable $e) {
    echo "ERROR: " . $e->getMessage() . "\n";
}

exit($ret ? 0 : 2);
